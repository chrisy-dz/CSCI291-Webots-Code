#include <stdio.h>
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/light_sensor.h>
#include <webots/gps.h>
#include <webots/led.h> 

// Constants
#define TIME_STEP 64        // Simulation step time
#define MAX_SPEED 6.28      // Maximum motor speed
#define LIGHT_THRESHOLD 500.0 // Threshold for light intensity
#define WALL_THRESHOLD 100.0  // Threshold for wall detection
#define GPS_THRESHOLD 0.01    // Threshold for GPS proximity

// Function prototype
bool is_dead_end();

int main(int argc, char **argv) {
    wb_robot_init(); // Initialize the robot
    
    // Initialize motors
    WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
    WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
    wb_motor_set_position(left_motor, INFINITY); // Set position to infinity for velocity control
    wb_motor_set_position(right_motor, INFINITY);
    
    // Arrays to store dead-end light intensities and GPS coordinates
    double light_deadend[11]; 
    double gps_coordinates[10][3];
    
    // Variables for robot motion and tracking
    double left_speed = MAX_SPEED;
    double right_speed = MAX_SPEED;
    int counter = 0;       // Counter for dead ends detected
    double max = 0;     // Maximum light intensity found
    int j = 0;          // Index of the brightest dead end

    // Initialize distance sensors
    WbDeviceTag distance_sensors[8];
    char dist_sensor_name[50];
    for (int i = 0; i < 8; i++) {
        sprintf(dist_sensor_name, "ps%d", i); // Sensor names: ps0, ps1, ...
        distance_sensors[i] = wb_robot_get_device(dist_sensor_name);
        wb_distance_sensor_enable(distance_sensors[i], TIME_STEP); // Enable sensor
    }

    // Initialize light sensor
    WbDeviceTag light_sensor = wb_robot_get_device("ls0");
    wb_light_sensor_enable(light_sensor, TIME_STEP);

    // Initialize GPS sensor
    WbDeviceTag gps = wb_robot_get_device("gps");
    wb_gps_enable(gps, TIME_STEP);

    // Initialize LED
    WbDeviceTag led = wb_robot_get_device("led0");

    // Variables to track dead ends
    int dead_end_count = 0;       // Counter for consecutive detections
    double dead_end_timer = 0;    // Timer for dead-end detection

    // Function to determine if the robot is at a dead end
    bool is_dead_end() {
        double front_distance = wb_distance_sensor_get_value(distance_sensors[0]); // Get front sensor value
        double current_time = wb_robot_get_time(); // Current simulation time

        // Detect dead end based on distance sensor
        if (front_distance > 100) {
            if (dead_end_count == 0 || (current_time - dead_end_timer) > 1.7) {
                dead_end_timer = current_time;
                dead_end_count++;
            }
        }

        // Confirm dead end if condition persists
        if (dead_end_count >= 2) {
            dead_end_count = 0;
            return true;
        }

        // Reset counter if no dead end is detected for 10 seconds
        if ((current_time - dead_end_timer) > 10.0) {
            dead_end_count = 0;
        }
        
        return false;
    }

    // Main control loop
    while (wb_robot_step(TIME_STEP) != -1) {
        const double *gps_values = wb_gps_get_values(gps); // Get GPS coordinates
        
        // Check for walls and corners using distance sensors
        bool left_wall = wb_distance_sensor_get_value(distance_sensors[5]) > WALL_THRESHOLD;
        bool left_corner = wb_distance_sensor_get_value(distance_sensors[6]) > WALL_THRESHOLD;
        bool front_wall = wb_distance_sensor_get_value(distance_sensors[7]) > WALL_THRESHOLD;

        // Read light intensity
        double light_value = wb_light_sensor_get_value(light_sensor);

        // If a dead end is detected
        if (is_dead_end()) {
            if (counter < 10) { // Record up to 10 dead ends
                counter++;
                light_deadend[counter] = light_value; // Store light intensity
                gps_coordinates[counter - 1][0] = gps_values[0]; // Store GPS coordinates
                gps_coordinates[counter - 1][1] = gps_values[1];
                gps_coordinates[counter - 1][2] = gps_values[2];

                // Print dead-end information
                printf("%d  ", counter);
                printf("Dead end detected\n");
                printf("Light sensor value: %f\n", light_deadend[counter]);
                printf("Dead-end coordinates: x = %f, y = %f, z = %f\n", gps_values[0], gps_values[1], gps_values[2]);
            }

            if (counter == 10) { // After detecting 10 dead ends
                for (int i = 1; i <= 10; i++) { // Find the dead end with maximum light intensity
                    if (light_deadend[i] > max) {
                        max = light_deadend[i];
                        j = i;
                    }
                }
                printf("Maximum light intensity %f at dead end %d\n", max, j);
                printf("Coordinates of the brightest dead end: x = %f, y = %f, z = %f\n",
                       gps_coordinates[j - 1][0], gps_coordinates[j - 1][1], gps_coordinates[j - 1][2]);
                counter++;
            }

            // Check if the robot has reached the brightest dead end
            if (fabs(gps_values[0] - gps_coordinates[j - 1][0]) < GPS_THRESHOLD &&
                fabs(gps_values[1] - gps_coordinates[j - 1][1]) < GPS_THRESHOLD &&
                fabs(gps_values[2] - gps_coordinates[j - 1][2]) < GPS_THRESHOLD) {
                printf("\n\nYOU HAVE SUCCESSFULLY REACHED THE DEAD END WITH MAXIMUM LIGHT INTENSITY!\n\n");
                
                // Stop the robot and blink the LED
                wb_motor_set_velocity(left_motor, 0.0);
                wb_motor_set_velocity(right_motor, 0.0);
                for (int i = 0; i < 10; i++) { // Blink 10 times
                    wb_led_set(led, 1); // Turn LED on
                    wb_robot_step(250); // Wait for 250 ms
                    wb_led_set(led, 0); // Turn LED off
                    wb_robot_step(250); // Wait for 250 ms
                }

                break; // Exit the loop
            }
        } else { // General navigation logic
            if (front_wall) { // Turn around if front wall is detected
                left_speed = MAX_SPEED;
                right_speed = -MAX_SPEED;
            } else if (left_wall) { // Follow the wall
                left_speed = MAX_SPEED / 2;
                right_speed = MAX_SPEED / 2;
            } else if (left_corner) { // Turn left at a corner
                left_speed = MAX_SPEED;
                right_speed = MAX_SPEED / 4;
            } else { // Move forward otherwise
                left_speed = MAX_SPEED / 4;
                right_speed = MAX_SPEED;
            }
        }

        // Set motor velocities
        wb_motor_set_velocity(left_motor, left_speed);
        wb_motor_set_velocity(right_motor, right_speed);
    }

    // Clean up Webots resources
    wb_robot_cleanup();

    return 0;
}
